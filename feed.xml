<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2019-07-02T03:07:21-05:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Omar Makled</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">New PHP 7 Features</title><link href="http://0.0.0.0:4000/2019/07/02/php7.html" rel="alternate" type="text/html" title="New PHP 7 Features" /><published>2019-07-02T00:00:00-05:00</published><updated>2019-07-02T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/07/02/php7</id><content type="html" xml:base="http://0.0.0.0:4000/2019/07/02/php7.html">## New PHP 7 features

- [Scalar type hints](#scalar-type-hints)
- [Return type declarations](#return-type-declarations)
- [Anonymous classes](#anonymous-classes)
- [The Closure::call() method](#the-closure::call-method)
- [The null coalesce operator](#the-null-coalesce-operator)
- [The space ship operator](#the-space-ship-operator)
- [Throwables](#throwables)
- [Level support for the dirname() function](#level-support-for-the-dirname-function)
- [The Integer division function](#the-integer-division-function)
- Uniform variable syntax
- Generator delegation
- Generator return expressions

### Scalar type hints

Type hints or type declarations have been available in PHP for while now. Unfortunately they were restricted to classes, arrays and callables.

As of PHP 7, the scalar types (integers, floating point numbers, booleans and strings) can also be used as type hints.

It allows developers to ensure a better input consistency of a function/method interface.

By default “coercive mode” is enabled. This restricts PHP from throwing a type error when the types don’t exactly match, but when a conversion is still possible.

If you enable “strict mode”, a type error is thrown when the signatures don’t match.

```php
&lt;?php
declare(strict_types=1);
/**
 * Scalar type declarations
 */
function add(int $a, int $b) {
    return $a + $b;
}

echo(add(&quot;1&quot;, &quot;2&quot;));
```

### Return type declarations

Whereas type hints ensure input consistency, return type declarations ensure output consistency.

We use a colon before the opening curly brace of a function to hint the return type.

```php
/**
 * Return type declarations
 */
function add(int $a, int $b): int{
    return (string)($a + $b);
}
```

The same strictness rules apply as with the type hints: if “strict mode” is disabled, return values that can be converted to the preferred type are allowed. If you enable “strict mode” this code will throw a type error.

### Anonymous classes

Anonymous classes are useful for simple one-off objects. With anonymous classes you can define a class and instantiate an object inline.

```php
/**
 * Anonymous classes
 */
$foo = new class {
    public function foo() {
        return &quot;bar&quot;;
    }
};
echo($foo-&gt;foo());
```

### The Closure::call() method

An anonymous function is simply a function with no name.
For example, to create a regular function, you might write something like this:

```php
function greeting () {
    return &quot;Hello world&quot;;
}
```

You can then simply call this function like this:

```php
echo greeting();
```

An anonymous function has no name so you would define it like this:

```php
function () {
    return &quot;Hello world&quot;;
}
```

Because the function has no name, you can’t call it like a regular function. Instead you must either assign it to a variable or pass it to another function as an argument.

Closures are anonymous functions that are declared inline and assigned to a variable. It can be used as a callback for later execution. In PHP 5 it was already possible to bind an object to the scope of the closure as if it was a method.

The “call” method is one of the PHP 7 features that was introduced to simplify the process.

```php
class Foo
{
    private $foo = 'bar';
}

$cb = function () {
    return ucwords($this-&gt;foo);
};

echo $cb-&gt;call(new Foo) . PHP_EOL;
```

It's useful because they are throw away functions that you can use once. Often, you will need a function to do a job, but it doesn’t make sense to have it within the global scope or to even make it available as part of your code.

### The null coalesce operator

The null coalesce operator is a shorthand for checking if a value is set and not null within inline comparisons. Instead of doing the same old “isset” check over and over again, just use “??” to return the value if it is set (and not null) or an alternative value instead.

```php
/**
 * Null coalesce operator
 */
$array = ['foo'=&gt;'bar'];
//PHP5 style
$message = isset($array['foo']) ? $array['foo'] : 'not set';
echo $message.PHP_EOL;
//PHP7 style
$message = $array['foo'] ?? 'not set';
echo $message.PHP_EOL;
```

### The space ship operator

The so-called “space ship operator” makes it easier to compare values. Instead of returning a typical true/false value, the space ship operator returns one of the follow values based on the result of the evaluation:

- 0 when both values are equal
- -1 when the left value is less than the right value
- 1 if the left value is greater than the right value

```php
/**
 * Space ship operator
 */
$array = [
    &quot;1 &lt;=&gt; 1&quot; =&gt; 1 &lt;=&gt; 1,
    &quot;1 &lt;=&gt; 2&quot; =&gt; 1 &lt;=&gt; 2,
    &quot;2 &lt;=&gt; 1&quot; =&gt; 2 &lt;=&gt; 1,
];
var_dump($array);

```

### Throwables

A big change in PHP 7 is the fact that errors are no longer raised the way they used to be raised. Errors now behave in a similar way as exceptions. They both inherit from the Throwable interface.

This means that errors can now be caught in a try/catch block. You can catch both exceptions and errors as Throwables, but you can also catch errors as Error objects.

An Error &quot;indicates serious problems that a reasonable application should not try to catch.&quot;

An Exception &quot;indicates conditions that a reasonable application might want to catch.&quot;

```php
&lt;?php
/**
 * Throwable interface
 */
//Error as Throwable
try {
    sqdf();
} catch (Throwable $t) {
    echo &quot;Throwable: &quot;.$t-&gt;getMessage().PHP_EOL;
}
//Exception as Throwable
try {
    throw new Exception(&quot;Bla&quot;);
} catch (Throwable $t) {
    echo &quot;Throwable: &quot;.$t-&gt;getMessage().PHP_EOL;
}
//Error
try {
    sqdf();
} catch (Error $e) {
    echo &quot;Error: &quot;.$e-&gt;getMessage().PHP_EOL;
} catch (Exception $e) {
    echo &quot;Exception: &quot;.$e-&gt;getMessage().PHP_EOL;
}
//Exception
try {
    throw new Exception(&quot;Bla&quot;);
} catch (Error $e) {
    echo &quot;Error: &quot;.$e-&gt;getMessage().PHP_EOL;
} catch (Exception $e) {
    echo &quot;Exception: &quot;.$e-&gt;getMessage().PHP_EOL;
}
//Type error
try {
    function add(int $a, int $b):int {
        return $a + $b;
    }
    echo add(array(), array());
} catch (TypeError $t) {
    echo &quot;Type error: &quot;.$t-&gt;getMessage().PHP_EOL;
}
```

### Level support for the dirname() function

The dirname function is used more often than you would think. It is the ideal function to refer to directories in a relative way.

But when you want to go a couple of levels up, you end up nesting dirname calls and that will eventually lead to confusion.

As of PHP 7 the dirname function has a second argument that indicates how many levels your going up the directory tree. If you don’t enter a value, 1 is the default.

```php
echo dirname('/usr/local/bin').PHP_EOL;
echo dirname('/usr/local/bin',1).PHP_EOL;
echo dirname('/usr/local/bin',2).PHP_EOL;
echo dirname('/usr/local/bin',3).PHP_EOL;
```

### The Integer division function

Maybe not one the most important PHP 7 features, but still worth mentioning: the intdiv function returns the integer value of a division whereas regular divisions can result in a float being returned.

```php
echo (intdiv(10, 3)) . PHP_EOL;

echo 10 / 3;
```</content><author><name></name></author><summary type="html">New PHP 7 features</summary></entry><entry><title type="html">Testing Microservices</title><link href="http://0.0.0.0:4000/2019/07/01/testing-microservices.html" rel="alternate" type="text/html" title="Testing Microservices" /><published>2019-07-01T00:00:00-05:00</published><updated>2019-07-01T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/07/01/testing-microservices</id><content type="html" xml:base="http://0.0.0.0:4000/2019/07/01/testing-microservices.html">A microservice architecture involves many moving parts with different guarantees
and failure modes, testing these systems is more challenging than testing
traditional monolithic application. an effective test strategy needs to account
for testing individual services in isolation and the verification of overall
system behaviour.

### What are microservices?

![](https://cdn-images-1.medium.com/max/1600/0*35CIX00OXWaVH57g.png)

There are two basic software development styles, first and most common style is
monolithic Application, it is called monolith because it consists of a single
application contained in a single process.

The microservices architectural style in the other hand involves developing
single applications that can work together with a suite of small autonomous
services, each running in its individual process and communicating using
lightweight mechanisms such as HTTP resource API. These services can be written
in different programming language and different data storage technologies, and
each of them can be deployed and scaled independently.

### Why do we test?

Do we ?! To code with confident like that, We need to write tests that verify
our code is running in a proper way, writing tests make code maintenance much
easier because you have what assure that your maintenance for one part won’t
affect other parts in a wrong way, also writing tests can provide us feedback
about the system if it is working properly in a fast, accurate way while you can
do this in a manual way, it will never be as accurate, fast as the automated
test cases.

Writing tests can give you detailed feedback about our code, automated coverage
report can tell us if the code is tested enough or not and which cases you
forget to test it.

### Different type of testing strategies

In microservice architecture, your system is built as suites of collaborating
services.

To verify that services work together in a harmony we had to write different
types of test strategies starting from basic unit tests that exercises the
smallest piece of testable software in the application to determine whether it
behaves as expected, to the End to End testing which verifies that a system
meets the external requirements and achieve its goals.

![](https://cdn-images-1.medium.com/max/1600/0*L7uyy4tWZ_LK9LIC.png)

the test pyramid helps us to identify different types of tests and when to use
each of them.

We use those different test strategies except the last one the exploratory,
which basically an automated regression testing that runs across the whole
system, but we hope to reach this level soon.

let’s go bottom up throw those strategies one by one.

Our Microservices usually contains different smaller modules (Repositories,
Service layer, Resources, Gateway, ORM. etc)

each module should have it’s independent **unit tests** that are verifying that
module working in a proper way independently.

### But why unit tests are not enough?

In microservice case unit tests alone is not enough because in our opinion it
doesn’t cover the whole system behaviours, as we said by unit tests we provide
good coverage of each core module of the microservice independently but there’s
no coverage for those modules when the work together as a system or as a
service, To verify that each module correctly interacts with its collaborators,
more testing is required.

### Integration testing

Integration testing is a testing strategy that we need to verify the interaction
between various microservice components and detect interface defects.

Integration testing collects modules together and tests them as a subsystem to
verify that they collaborate as they intended to achieve some larger piece of
interactions.

Also, it verifies that the communication paths between the system to check how
the subsystem interact with its peers.

In our microservices, we must write integration tests to verify those
interactions between layers of integration code and the external component that
we integrate with.

### Mocking vs Integration testing

In order for our microservices to do their job they need to communicate with
other services, so to test a microservice in isolation we need to mock other
dependencies so that the only thing under the test is the unit that we are
testing and when the test fails we can easily determine the issue.

Mocking is effective with unit tests, With that said, if integration tests are
not done properly, it will do more harm than good. Imagine if one of our
dependencies changed its API, our service test cases will still pass while they
should fail as they use the mock instead of making the real call, and another
downside is that you have to maintain these mocks as other services change.

### Component testing

First let’s define the component boundaries, in our opinion a component is any
well-encapsulated, coherent and independently replaceable part of a larger
system.

Component testing can provide us with a lot of benefits, by limiting all service
modules to be tested as one single component to avoid any complex behaviour that
service may have while connecting to another service.

Also isolating your modules as a single component with test doubles will define
the component behaviours and define tests for that behaviour together using
component tests.

### End-to-End tests

End-to-end tests run against your entire system to verify that all your system
parts are working together as expected, so when they pass you feel confident
that your code will work in production as expected because they test the entire
process and the user flow.

As end-to-end test scope increases the feedback cycle time increases as well
because tests take a longer time to run, and when a test fails it is hard to
determine which part is broken and here comes the role of other lower level
types of testing.

### Conclusion

High-level tests provide verification that the system works as expected and all
parts are connected together in a proper way, while low-level tests provide a
way to verify that each piece of code is doing its job correctly, and when it
doesn’t you will know accurately the reason.

The combination of different type of test strategies leads to more code coverage
that help you to find edge cases that we need to handle in our actual code.</content><author><name></name></author><summary type="html">A microservice architecture involves many moving parts with different guarantees and failure modes, testing these systems is more challenging than testing traditional monolithic application. an effective test strategy needs to account for testing individual services in isolation and the verification of overall system behaviour.</summary></entry><entry><title type="html">Software Components</title><link href="http://0.0.0.0:4000/2019/07/01/software-components.html" rel="alternate" type="text/html" title="Software Components" /><published>2019-07-01T00:00:00-05:00</published><updated>2019-07-01T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/07/01/software-components</id><content type="html" xml:base="http://0.0.0.0:4000/2019/07/01/software-components.html">![](https://cdn-images-1.medium.com/max/1600/0*bnfIs_NW1Xz3P9r3)
&lt;span class=&quot;figcaption_hack&quot;&gt;Photo by
[Fancycrave](https://unsplash.com/@fancycrave?utm_source=medium&amp;utm_medium=referral)
on [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)&lt;/span&gt;

Components are the units of deployment, they are the smallest entity that can be
deployed as part of the system, In Java, they are Jar files, In Ruby, they are
gems files.

Components can be linked together into a single executable or they can be
independently deployed as separate plugins, regardless of how they have
eventually deployed well-designed components always retain the ability to be
independently deployed and developed.

---

We will discuss a little how we can design a cohesive software component, we
will discuss **principles of components cohesion** which [uncle
bob](https://en.wikipedia.org/wiki/Robert_C._Martin) defined them in details in
his book [clean
architecture](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882).

- REP: Reuse-Release Equivalence principle.
- CCP: Common Closure Principle.
- CRP: Common Reuse Principle.

#### REP: Reuse-Release Equivalence Principle

&gt; the granule of reuse is the granule of release.

To reuse a software component you can't do so unless that component tracked
through a release process and is given a release number because without a
release number there would be no way to ensure that all the reused components
that you're using are compatible with each other.

This principle means that the classes and modules that are formed into a
component must belong t a cohesive group. a software component can not consist
of random classes and modules there’s must be some overarching theme of purpose.

#### CCP: Common Closure Principle

&gt; gather into component those classes that change for the same reason and at the
&gt; same time separate into different components those classes that change at a
&gt; different time and for different reasons.

The CCP is the component form for the
[SRP](https://en.wikipedia.org/wiki/Single_responsibility_principle), while the
[SRP](https://en.wikipedia.org/wiki/Single_responsibility_principle) tells us to
separate methods into different classes if they change for different reasons,
the CCP tells us to separate classes into different components if they change
for different reasons.

#### CRP: Common Reuse Principle

&gt; Don’t force users of a component to depend on things they don’t need.

The CRP is a generic version of the
[ISP](https://en.wikipedia.org/wiki/Interface_segregation_principle), while the
[ISP](https://en.wikipedia.org/wiki/Interface_segregation_principle) advised us
not to depend on classes that have methods we don’t need the CRP advice us not
to use components that have classes we don’t need.

#### CONCLUSION

Finally, that was a very simple introduction to how to develop a cohesive
component, helping you to take the decision of which classes belong in which
components.</content><author><name></name></author><summary type="html">Photo by Fancycrave on Unsplash</summary></entry><entry><title type="html">Notes on building microservices</title><link href="http://0.0.0.0:4000/2019/07/01/notes-on-building-microservices.html" rel="alternate" type="text/html" title="Notes on building microservices" /><published>2019-07-01T00:00:00-05:00</published><updated>2019-07-01T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/07/01/notes-on-building-microservices</id><content type="html" xml:base="http://0.0.0.0:4000/2019/07/01/notes-on-building-microservices.html">![](https://cdn-images-1.medium.com/max/1440/1*3JKJYR37PS9JMy1gGIi0fw.jpeg)

The idea of separating application into a smaller parts is nothing new, there
are other programming paradigms which address this same concept However, recent
technology advances coupled with an increasing expectation of integrated
“digital experiences” have given rise to a new breed of development tools and
techniques used to meet the needs of modern business applications.

### What Are Microservices?

**A small autonomous services that works together**

that not detailed definition let’s discuss it more

**Small** and focused on doing one thing well, when it comes to how small is
small enough the smaller the service the more you maximize the benefits and the
down sides of microservices, in a monolithic codebase it can be difficult to
know where a change needs to be made because the codebase getting larger
overtime, so we keep trying to ensuere code quality by creating abstraction or
modules the drive to have related code grouped together is an important concept
this comes to single responsibility principles, that’s why we focus our services
boundaries on business boundaries making it obvious where code lives for a given
piece of functionality where the service focused on an explicit boundaries.

**Autonomous, **it means that the microservice is a separated entity that might
be deployed as an isolated service on platform or it might has it’s own
operation system process.

### **Key benefits from Microservices architecture**

* **Technology Heterogeneity**: with system composed of multiple service we can
decide to use different technologies inside each one.
* **Resilience**: if one of system component failed you can isolate it and your
system should operate normally.
* **Scaling**: with a large monolithic app you must scale everything as one piece
on the other hand with a small services you can just scale that small service
that needs a scaling.
* **Ease of deployment**: with microservices you can change to an single service
and deploy it independently of the rest of the system this means faster
deployment, lower risk than deployment in a monolithic app which means a
one-line change requires the whole system to be deployed in order to release the
change.
* **Organizational alignment: **microservices helps you to have better align our
architecture to your organization, by minimizing the number of people working on
any one codebase to hit the sweet spot of team size and productivity.
* **Optimizing for replaceability: **with our individual services being small in
size the cost to replace them with a better implementation is much easier to
mange.

This blog is my notes on chapter 1 from [Building microservices book for sam
newman](http://shop.oreilly.com/product/0636920033158.do) and it’s a part of my
blog series discuss microservice architecture.</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Symfony Performance Logger</title><link href="http://0.0.0.0:4000/2019/06/27/symfony-performance-logger.html" rel="alternate" type="text/html" title="Symfony Performance Logger" /><published>2019-06-27T00:00:00-05:00</published><updated>2019-06-27T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/06/27/symfony-performance-logger</id><content type="html" xml:base="http://0.0.0.0:4000/2019/06/27/symfony-performance-logger.html">### Performance Logger ON Producation !

`Doctrine` already ships with an awesome logger. Symfony enables that logger on dev mode the doctrine tab that we see on the profile comes from logger itself Symfony just display it.

#### How to use the logger on production?

- We should set the profiling option to enable `Doctrine\DBAL\Logging\DebugStack`

- After `kernel.terminate` event fired we can use `DebugStack`.

Here's a PerformanceLog.

```php
&lt;?php

namespace Aqarmap\Bundle\MainBundle\EventListener;

use Aqarmap\Bundle\MainBundle\Document\PerformanceLog;
use Doctrine\DBAL\Logging\DebugStack;
use Doctrine\ODM\MongoDB\DocumentManager;
use JMS\DiExtraBundle\Annotation as DI;
use Symfony\Component\HttpKernel\Event\PostResponseEvent;

/**
 * @DI\Service(&quot;aqarmap.performance.listener&quot;)
 * @DI\Tag(&quot;kernel.event_listener&quot;, attributes = {
 *  &quot;event&quot;=&quot;kernel.terminate&quot;,
 *  &quot;method&quot;=&quot;handel&quot;
 * })
 */

final class PerformanceListener
{
    /**
     *
     * @var DebugStack
     */
    private $debugStack;

    /**
     *
     * @var DocumentManager
     */
    private $documentManager;

    /**
     *
     * @var array
     */
    private $config;

    /**
     * @DI\InjectParams({
     *      &quot;debugStack&quot; = @DI\Inject(&quot;doctrine.dbal.logger.profiling.default&quot;),
     *      &quot;documentManager&quot; = @DI\Inject(&quot;doctrine_mongodb.odm.default_document_manager&quot;),
     *      &quot;config&quot; = @DI\Inject(&quot;%agarmap.performance_log%&quot;)
     * })
     *
     * @param DebugStack $debugStack
     * @param DocumentManager $documentManager
     * @param array $config
     */
    public function __construct(DebugStack $debugStack, DocumentManager $documentManager, array $config)
    {
        $this-&gt;debugStack = $debugStack;
        $this-&gt;documentManager = $documentManager;
        $this-&gt;config = $config;
    }

    /**
     *
     * @param PostResponseEvent $event
     * @return void
     */
    public function handel(PostResponseEvent $event)
    {
        if (!$this-&gt;config['enabled']) {
            return;
        }

        $queries = $this-&gt;debugStack-&gt;queries;
        $request = $event-&gt;getRequest();
        $log = new PerformanceLog();

        $log-&gt;setQueryTotalExecuationTime(number_format(array_sum(array_column($queries, 'executionMS')) * 1000, 2));
        $log-&gt;setAction($request-&gt;get('_controller'));
        $log-&gt;setUrl($request-&gt;getSchemeAndHttpHost() . $request-&gt;getRequestUri());
        $log-&gt;setQueryTotalCount(count($queries));
        $log-&gt;setCreatedAt(new \Datetime);

        $this-&gt;documentManager-&gt;persist($log);
        $this-&gt;documentManager-&gt;flush();
    }
}
```

Now we have a performance logger that can help us to measure queries and we can also add more and more like for example HTML rendering time, Code execution time and so one

I've made it totally stand alone in order to remove it later as microservice.

After the next release, we can start to get our hands dirty.</content><author><name></name></author><summary type="html">Performance Logger ON Producation !</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/3720473/60279249-fc182000-9900-11e9-871f-f8a8d25e8aa9.png" /></entry><entry><title type="html">Sorting Issues</title><link href="http://0.0.0.0:4000/2019/06/02/problem-solving.html" rel="alternate" type="text/html" title="Sorting Issues" /><published>2019-06-02T00:00:00-05:00</published><updated>2019-06-02T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/06/02/problem-solving</id><content type="html" xml:base="http://0.0.0.0:4000/2019/06/02/problem-solving.html">As long as this issue one of the highest and oldest one let me describe it in details.

| Sorting    | View ES | Api ES | View MySql | Api MySql |
|------------|---------|--------|------------|-----------|
| Price asc  | ✓       | ✓      | ✓          | ✓         |
| Price desc | ✓       | ✗      | ✓          | ✓         |
| Area asc   | ✓       | ✓      | ✓          | ✓         |
| Area desc  | ✓       | ✗      | ✓          | ✓         |


​As we notice issue with `desc` something really weird a little bit after digging into code for a good bit of time I catch the error here it is.

`FOS\ElasticaBundle\Subscriber\PaginateElasticaQuerySubscriber@getSortDirection`​

```php?start_inline=true
protected function getSortDirection($sortField, array $options = [])
{
    $dir = 'asc';
    $sortDirection = $this-&gt;getRequest()-&gt;get($options['sortDirectionParameterName']);

    if (empty($sortDirection) &amp;&amp; isset($options['defaultSortDirection'])) {
        $sortDirection = $options['defaultSortDirection'];
    }
    ...
}
```
It redefines Sort depending on query string searching for parameter with name as we define in config in or case `direction` **api request passes `&amp;orderDirection=` instead of `&amp;direction=`** so it reset direction to the default one `asc`.

We could fix that issues simply by just adding parameter with name `direction` :)

```php?start_inline=true
// VERY IMPORTANT
$request-&gt;query-&gt;set(
    'direction',
    $request-&gt;query-&gt;get('orderDirection')
);
```</content><author><name></name></author><summary type="html">As long as this issue one of the highest and oldest one let me describe it in details.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/images/posts/api-sorting-issues.png" /></entry><entry><title type="html">Symfony Notification Part1</title><link href="http://0.0.0.0:4000/2019/06/01/symfony-notification-walking-skeleton.html" rel="alternate" type="text/html" title="Symfony Notification Part1" /><published>2019-06-01T00:00:00-05:00</published><updated>2019-06-01T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/06/01/symfony-notification-walking-skeleton</id><content type="html" xml:base="http://0.0.0.0:4000/2019/06/01/symfony-notification-walking-skeleton.html">### Create Notification

We serve as a great way to decouple various aspect of notification and channels since each one of them is a detached class which provides a low coupling for reliable, scalable, and maintainable system.

You can manually creating new Notifcation or via command that will generat boilerplate.

For example `aqarmap make:notification NewListing` it will generate NewListing notification with boilerplate inside `Aqarmap\NotificationBundle\Notifications`.

After creating notification class you can define configration via configration file.

`notifications.yml`
```php?start_inline=true
NewListing:
    class: Aqarmap\NotificationBundle\Notifications\NewListing
    channel: ['sms', 'database', 'mail']
    queue: ['sms', 'database', 'mail']
```
Or inside class.
`NewListing.php`
```php?start_inline=true
/**
* List of channels
*
* @var array
*/
public $channel = ['database'];

/**
* List of queues
*
* @var array
*/
public $queue = [];
```

We also provides a simple queue implementation, allowing you to asynchronous sending for particular channel by define queue for example

`notifications.yml`
```php?start_inline=true
NewListing:
    class: Aqarmap\NotificationBundle\Notifications\NewListing
    channel: ['sms', 'database', 'mail']
    queue: ['mail']
```
Or inside class `NewListing.php`
```php?start_inline=true
/**
* List of queues
*
* @var array
*/
public $queue = ['mail'];
```
by default notification will send `synchronize` here's we defiend `mail` to be `asynchronous`

### Create Channel

Since each channel is a detached we provides out of the box `Mail` and `DataBase`channels you can add more channels such as telegram, facebook, twitter and so on.
all channels is stored in `Aqarmap\NotificationBundle\Channels` namespace.

### Dispatch Notification

To dispatch a notification simple by running
```php?start_inline=true
$manager = new ChannelManager();
$manager-&gt;send($users, $notification);
```

Where `ChannelManager` is a factory or builder that build appropriate driver for each channel if driver not found it will throw `DriverNotFoundException` where sending Notification It is done through `NotifictionSender`

That's a quick intro for notification system. Happy coding!

### Testing 

I've build notification bundle with testing in mind, the bundle ships with eloquent testing.

```php?start_inline=true
/*
* This file is part of Moonshot Project 2017.
*
* @author Omar Makled &lt;omar.makled@aqarmap.com&gt;
*/
namespace Aqarmap\NotificationBundle\Tests;
use Mockery;
use Aqarmap\NotificationBundle\NotificationConfig;
use Aqarmap\NotificationBundle\ChannelManager;
use Aqarmap\NotificationBundle\NotificationSender;
use Aqarmap\NotificationBundle\Tests\Notification;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Aqarmap\NotificationBundle\Exceptions\DriverNotFoundException;
use Aqarmap\NotificationBundle\Exceptions\NotificationConfigException;
class ChannelManagerTest extends WebTestCase
{
    protected $manager;
    protected $notification;
    public function tearDown()
    {
        Mockery::close();
    }
    public function setUp()
    {
        self::bootKernel();
        $app = static::$kernel-&gt;getContainer();
        $this-&gt;manager = new ChannelManager($app);
        $this-&gt;notification = new Notification();
    }
    public function testDriverNotFoundException()
    {
        $this-&gt;expectException(DriverNotFoundException::class);
        $this-&gt;expectExceptionMessage(&quot;We don't support foo Driver&quot;);
        $this-&gt;manager-&gt;driver('foo');
    }
    public function testNotificationConfigException()
    {
        $this-&gt;expectException(NotificationConfigException::class);
        $this-&gt;expectExceptionMessage(&quot;We can't find config foo&quot;);
        $this-&gt;notification-&gt;channel = ['sms', 'database', 'mail'];
        $this-&gt;notification-&gt;queue = ['mail'];
        $this-&gt;manager-&gt;getConfig($this-&gt;notification, 'foo');
    }
    public function testGetConfigProperty()
    {
        $this-&gt;notification-&gt;channel = ['sms', 'database', 'mail'];
        $this-&gt;notification-&gt;queue = ['mail'];
        $this-&gt;assertEquals(
            ['sms', 'database', 'mail'], $this-&gt;manager-&gt;getConfig($this-&gt;notification, 'channel')
        );
        $this-&gt;assertEquals(
            ['mail'], $this-&gt;manager-&gt;getConfig($this-&gt;notification, 'queue')
        );
    }
    public function testGetConfigFile()
    {
        $config = $this-&gt;manager-&gt;getConfig($this-&gt;notification, 'channel', __DIR__.'/config.yml');
        $this-&gt;assertEquals(['sms', 'database', 'mail'], $config);
        $config = $this-&gt;manager-&gt;getConfig($this-&gt;notification, 'queue', __DIR__.'/config.yml');
        $this-&gt;assertEquals(['sms', 'database', 'mail'], $config);
    }
}
```</content><author><name></name></author><summary type="html">Create Notification</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/images/posts/symfony-notification.jpg" /></entry><entry><title type="html">Symfony Notification Part2</title><link href="http://0.0.0.0:4000/2019/06/01/digging-into-notification-step-by-step.html" rel="alternate" type="text/html" title="Symfony Notification Part2" /><published>2019-06-01T00:00:00-05:00</published><updated>2019-06-01T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/06/01/digging-into-notification-step-by-step</id><content type="html" xml:base="http://0.0.0.0:4000/2019/06/01/digging-into-notification-step-by-step.html"># Digging into notification step by step:

- How to create new notification and set channels?
- How to define message?
- How to send notification?
- How to set target user or users?
- How to test on Webview?


## How to create new notification and set channels?

Let's take an example
Go to `Aqarmap\Bundle\MainBundle\Notifications\Types\ListingWasPublished`
You will find public `$config` property it tells `NotificationManager` about config type.
```php?start_inline=true
/**
* Point to config type
*
* @var \Aqarmap\NotificationBundle\Config\ConfigInterface
*/
public $config = \Aqarmap\NotificationBundle\Config\YmlConfig::class;
```
Inside `src/Aqarmap/Bundle/MainBundle/Notifications/Types/config.yml`
```php?start_inline=true
Notifications:
    ListingWasPublished:
        class: Aqarmap\Bundle\MainBundle\Notifications\Types\ListingWasPublished
        channel: [Database, Mail, HTML]
        queue: []
```
Here is we define channels if you need to run any channle `async` simply define channel inside queue
```php?start_inline=true
Notifications:
    ListingWasPublished:
        class: Aqarmap\Bundle\MainBundle\Notifications\Types\ListingWasPublished
        channel: [Database, Mail, HTML]
        queue: [Mail]
```

## How to define message?

`NotificationManager` are looking for function prefix with `by` and name of channel such as `byDatabase` `byHTML`

Of Course You can create simple function and return message
```php?start_inline=true
/**
* Define the message via Database channel
*
* @return string
*/
public function byDatabase()
{
    return 'this message will show in webview when listing was published';
}
```
But in our project we need to create rich message, so we use twig to render message instead of simple text.
```php?start_inline=true
/**
    * Define the message via Database channel
    *
    * @return string
    */
public function byDatabase()
{
    return $this-&gt;twig-&gt;render(
        __DIR__.'/views/dataBase/listing_was_published.twig',
        ['subject' =&gt; $this-&gt;subject]
    );
}
```
as long as sending via mail and database is most common we created abstract `Notification` class following naming convention to return appropriate template
```php?start_inline=true
/**
* Convert class name to underscore
*
* @return string
*/
public function template()
{
    $class = (new ReflectionClass($this))-&gt;getShortName();
    $template =  strtolower(preg_replace('~(?&lt;=\\w)([A-Z])~', '_$1', $class));

    return $template;
}

/**
* Define the message via Database channel
*
* @return string
*/
public function byDatabase()
{
    return $this-&gt;twig-&gt;render(
        __DIR__.'/views/dataBase/'.$this-&gt;template().'.php.twig',
        ['subject' =&gt; $this-&gt;subject]
    );
}
```

## How to send notification?

`NotificationManager` is define inside IOC Continer that means you can simply inside controller get new instance.
```php?start_inline=true
$manager = $this-&gt;get('notification_manager');
$manager-&gt;send($user, new LisitingWasPublished);
```
But in many cases you might need to write some extra behaviours before sending notifications and to avoid massive controller We uses events.

For example when listing was published

Inside `Aqarmap\Bundle\ListingBundle\Service\ListingManager:309` we fire `listing.was.published` event.
```php?start_inline=true
$this-&gt;dispatcher-&gt;dispatch('listing.was.published', new Listing($listing));
```
Inside `Aqarmap\Bundle\MainBundle\Notifications\NotificationSubscriber`
```php?start_inline=true
/**
* Register the listeners for the subscriber.
*/
public static function getSubScribedEvents()
{
    return [
        'listing.was.published' =&gt; 'onListingWasPublished',
        'listing.was.rejected' =&gt; 'onListingWasRejected',
        'discussion.was.approval' =&gt; 'onDiscussionWasApproval',
        'discussion.was.rejected' =&gt; 'onDiscussionWasRejected',
        ...
    ];
}

/**
* Send notification when listing was published
*
* @param  \Aqarmap\Bundle\MainBundle\Notifications\Events\NotificationEvent $event
*
* @return void
*/
public function onListingWasPublished(NotificationEvent $event)
{
    $this-&gt;send(new ListingWasPublished, $event);
}
```

We are planning to use different approach by using subscriber to avoid rabbits inside controller &quot;for lack of the better word&quot;, but now first things first

## How to set target user or users?

We use events to

- avoid massive controller
- preparation before sending notification

Inside event we set user or users who will get noitification

`Aqarmap\Bundle\MainBundle\Notifications\Events\Listing`

```php?start_inline=true
/**
* Get user instance
*
* @return \Aqarmap\Bundle\UserBundle\Entity\User
*/
public function getUser()
{
    return $this-&gt;listing-&gt;getUser();
}
```

## How to test on Webview?
got to `/notifications/test`

![nov-14-2017 03-04-00](https://user-images.githubusercontent.com/3720473/32836108-6224e222-ca11-11e7-98d6-33f151863941.gif)</content><author><name></name></author><summary type="html">Digging into notification step by step:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/images/posts/symfony-notification-digging-into.jpg" /></entry></feed>